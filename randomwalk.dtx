% \iffalse
%% File: randomwalk.dtx Copyright (C) 2011-2012 Bruno Le Floch
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% -----------------------------------------------------------------------
%
%<*driver|package>
\RequirePackage{l3names}
%</driver|package>
%<*driver>
%\fi
\ProvidesFile{randomwalk.dtx}
  [2012-07-10 v0.2 Customizable Random Walks using TikZ]
%\iffalse
\RequirePackage[check-declarations]{expl3}
\documentclass[full]{l3doc}
\usepackage{randomwalk}
\usepackage{amsmath}
\begin{document}
  \DocInput{randomwalk.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{The \textsf{randomwalk} package: \\
%   customizable random walks using TikZ\thanks{This file has version
%     number 0.2, last revised 2012-07-10.}}
% \author{Bruno Le Floch}
% \date{July 10, 2012}
%
% \maketitle
% \tableofcontents
%
% \begin{documentation}
%
% \begin{abstract}
%
% The \pkg{randomwalk} package draws random walks using TikZ. The
% following parameters can be customized:
% \begin{itemize}
%   \item The number of steps, of course.
%   \item The length of the steps, either a fixed length, or a length
%     taken at random from a given set.
%   \item The angle of each step, either taken at random from a given
%     set, or uniformly distributed.
% \end{itemize}
%
% \end{abstract}
%
%
% \section{How to use it}
%
% The \pkg{randomwalk} package has exactly one user command:
% \cs{RandomWalk}, which takes a list of key-value pairs as its
% argument. A few examples:
% \begin{verbatim}
% \RandomWalk {number = 100, length = {4pt, 10pt}}
% \RandomWalk {number = 100, angles = {0,60,120,180,240,300}, degree}
% \RandomWalk {number = 100, length = 2em,
%   angles = {0,10,20,-10,-20}, degree, angles-relative}
% \end{verbatim}
% The simplest is to give a list of all the keys, and their meaning:
% \begin{itemize}
%   \item \texttt{number}: the number of steps (default \(10\))
%   \item \texttt{length}: the length of each step: either one dimension
%     (\emph{e.g.}, |1em|), or a comma-separated list of dimensions
%     (\emph{e.g.}, |{2pt, 5pt}|), by default |10pt|. The length of each
%     step is a random element in this set of possible dimensions.
%   \item \texttt{angles}: the polar angle for each step: a
%     comma-separated list of angles, and each step takes a random angle
%     among the list. If this is not specified, then the angle is
%     uniformly distributed along the circle.
%   \item \texttt{degree} or \texttt{degrees}: specify that the angles
%     are given in degrees.
%   \item \texttt{angles-relative}: instead of being absolute, the
%     angles are relative to the direction of the previous step.
% \end{itemize}
%
% \begin{figure}
%   \begin{center}
%     \framebox{\RandomWalk {number = 400, length = {4pt, 10pt}}}
%     \caption{The result of \texttt{RandomWalk\{number\ =\ 400,\
%         length\ =\ \{4pt,\ 10pt\}\}}: a \(400\) steps long walk, where
%       each step has one of two lengths.}
%   \end{center}
% \end{figure}
%
% \begin{figure}
%   \begin{center}
%     \framebox{\RandomWalk{number = 100, angles =
%         {0,60,120,180,240,300}, degrees}}
%     \caption{The result of \texttt{\string\RandomWalk\{number\ =\
%         100,\ angles\ =\ \{0,60,120,180,240,300\}, degrees\}}: angles
%       are constrained.}
%   \end{center}
% \end{figure}
%
% \begin{figure}
%   \begin{center}
%     \framebox{\RandomWalk {number = 40, length = 1em, angles =
%         {0,15,30,-15,-30}, degree, angles-relative}}
%     \caption{A last example: \texttt{\string\RandomWalk\ \{number\ =\
%         100,\ length\ =\ 2em,\ angles\ =\ \{0,10,20,-10,-20\},\
%         degree,\ angles-relative\}}}
%   \end{center}
% \end{figure}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{randomwalk} implementation}
%
% \subsection{Packages}
%
% The whole \pkg{expl3} bundle is loaded first.
%
%<*package>
%    \begin{macrocode}
%<@@=randomwalk>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesExplPackage
  {\ExplFileName}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\RequirePackage{expl3}
\RequirePackage{xparse}
%    \end{macrocode}
%
% I use some \LaTeXe{} packages: \pkg{TikZ}, for figures, and \pkg{lcg}
% for random numbers.
%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}
%
% \pkg{lcg} needs to know the smallest and biggest random numbers that
% it should produce, which we take to be $0$ and $\cs{c_@@_lcg_last_int}
% = 2^{31}-2$.  It will then store them in \cs{c@lcg@rand}: the |\c@| is
% there because of how \LaTeXe{} defines counters. To make it clear that
% |\c| has a very special meaning here, I do not follow \LaTeX3 naming
% conventions.
%    \begin{macrocode}
\int_const:Nn \c_@@_lcg_last_int { \c_max_int - \c_one }
\RequirePackage
  [
    first= \c_zero ,
    last = \c_@@_lcg_last_int ,
    counter = lcg@rand
  ]
  { lcg }
\rand % This \rand avoids some very odd bug.
%    \end{macrocode}
%
%
% \subsection{How the key-value list is treated}
%
% \begin{macro}{\RandomWalk}
%   The only user command is \cs{RandomWalk}: it simply does the setup, and
%   calls the internal macro \cs{@@_walk:}.
%    \begin{macrocode}
\DeclareDocumentCommand \RandomWalk { m }
  {
    \@@_set_defaults:
    \keys_set:nn { randomwalk } { #1 }
    \@@_walk:
  }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\g_@@_Ado_tl}
% \begin{macro}{\g_@@_Ldo_tl}
% \begin{macro}{\@@_set_defaults:}
%   Currently, the package treats the length of steps, and the angle,
%   completely independently. The token list \cs{g_@@_Ldo_tl} contains
%   the action that should be done to decide the length of the next step,
%   while the token list \cs{g_@@_Ado_tl} pertains to the angle.
%
%   \cs{@@_set_defaults:} sets the default values before processing the user's
%   key-value input.
%    \begin{macrocode}
\tl_new:N \g_@@_Ado_tl
\tl_new:N \g_@@_Ldo_tl
\bool_new:N \l_@@_A_relative_bool
\bool_new:N \l_@@_revert_random_bool
\cs_new:Npn \@@_set_defaults:
  {
    \fp_set:Nn \l_@@_step_length_fp {10}
    \int_set:Nn \l_@@_step_number_int {10}
    \tl_gset:Nn \g_@@_Ado_tl { \@@_Ainterval:nn {-\c_pi_fp} {\c_pi_fp} }
    \tl_gset:Nn \g_@@_Ldo_tl { \@@_Lfixed:n \l_@@_step_length_fp } %^^A bug?
    \bool_set_false:N \l_@@_revert_random_bool
    \bool_set_false:N \l_@@_A_relative_bool
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\keys_define:nn}
%   We introduce the keys for the package.
%    \begin{macrocode}
\keys_define:nn { randomwalk }
  {
    number .value_required:,
    length .value_required:,
    angles .value_required:,
    number .code:n = {\int_set:Nn \l_@@_step_number_int {#1}},
    length .code:n =
      {
        \clist_set:Nn \l_@@_lengths_clist {#1}
        \@@_clist_fp_from_dim:N \l_@@_lengths_clist
        \int_compare:nNnTF { \clist_length:N \l_@@_lengths_clist } = {1}
          { \tl_gset:Nn \g_@@_Ldo_tl { \@@_Lfixed:n \l_@@_lengths_clist } }
          { \tl_gset:Nn \g_@@_Ldo_tl { \@@_Llist:N \l_@@_lengths_clist } }
      },
    angles .code:n  =
      {
        \clist_set:Nn \l_@@_angles_clist {#1}
        \tl_gset:Nn \g_@@_Ado_tl { \@@_Alist:N \l_@@_angles_clist }
      },
    degree .code:n  = { \@@_radians_from_degrees:N \l_@@_angles_clist },
    degrees .code:n = { \@@_radians_from_degrees:N \l_@@_angles_clist },
    angles-relative .code:n   = { \bool_set_true:N \l_@@_A_relative_bool },
    revert-random .bool_set:N = \l_@@_revert_random_bool,
  }
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Drawing}
%
% \begin{macro}{\@@_walk:}
%   We are ready to define \cs{@@_walk:}, which draws a \pkg{TikZ}
%   picture of a random walk with the parameters set up by the
%   \texttt{keys}.  We reset all the coordinates to zero originally.
%   Then we draw the relevant \pkg{TikZ} picture by repeatedly calling
%   \cs{@@_step_draw:}.
%    \begin{macrocode}
\cs_new:Npn \@@_walk:
  {
    \fp_zero:N \l_@@_old_x_fp
    \fp_zero:N \l_@@_old_y_fp
    \fp_zero:N \l_@@_new_x_fp
    \fp_zero:N \l_@@_new_y_fp
    \begin{tikzpicture}
      \prg_replicate:nn { \l_@@_step_number_int } { \@@_step_draw: }
      \bool_if:NF \l_@@_revert_random_bool
        { \int_gset_eq:NN \cr@nd \cr@nd }
    \end{tikzpicture}
  }
%    \end{macrocode}
%   \cs{cr@nd} is internal to the lcg package.
% \end{macro}
%
% \begin{macro}{\@@_step_draw:}
%   \cs{@@_step_draw:} passes its second argument \emph{with one level of
%     braces removed} to its first argument, responsible for making a random
%   step. Then, \cs{@@_step_draw:} draws the random step.
%    \begin{macrocode}
\cs_new:Npn \@@_step_draw:
  {
    \g_@@_Ldo_tl
    \g_@@_Ado_tl
    \fp_add:Nn \l_@@_new_x_fp { \l_@@_radius_fp * cos \l_@@_angle_fp }
    \fp_add:Nn \l_@@_new_y_fp { \l_@@_radius_fp * sin \l_@@_angle_fp }
    \draw ( \fp_to_dim:N \l_@@_old_x_fp, \fp_to_dim:N \l_@@_old_y_fp )
       -- ( \fp_to_dim:N \l_@@_new_x_fp, \fp_to_dim:N \l_@@_new_y_fp );
    \fp_set_eq:NN \l_@@_old_x_fp \l_@@_new_x_fp
    \fp_set_eq:NN \l_@@_old_y_fp \l_@@_new_y_fp
  }
%    \end{macrocode}
% \end{macro}
%
% The next couple of macros store a random floating point in
% \cs{l_@@_length_fp} or \cs{l_@@_angle_fp}.
%
% \begin{macro}{\@@_L..:.}
%   First for the length of steps.
%    \begin{macrocode}
\cs_new:Npn \@@_Lfixed:n #1
  { \fp_set:Nn \l_@@_radius_fp {#1} }
\cs_new:Npn \@@_Llist:N #1
  { \@@_set_to_random_clist_element:NN \l_@@_radius_fp #1 }
\cs_new:Npn \@@_Linterval:nn #1#2
  { \@@_set_to_random_fp:Nnn \l_@@_radius_fp {#1} {#2} }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_A..:.}
%   Then for angles.
%    \begin{macrocode}
\cs_new:Npn \@@_Ainterval:nn #1#2
  {
    \bool_if:NTF \l_@@_A_relative_bool
      { \@@_add_to_random_fp:Nnn }
      { \@@_set_to_random_fp:Nnn }
      \l_@@_angle_fp {#1} {#2}
  }
\cs_new:Npn \@@_Alist:N #1
  {
    \bool_if:NTF \l_@@_A_relative_bool
      { \@@_add_to_random_clist_element:NN }
      { \@@_set_to_random_clist_element:NN }
      \l_@@_angle_fp #1
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{On random numbers etc.}
%
% For random numbers, the interface of \pkg{lcg} is not quite enough, so
% we provide our own \LaTeX3-y functions.  Also, this will allow us to
% change quite easily our source of random numbers.
%
%    \begin{macrocode}
\cs_new:Npn \@@_set_to_random_int:Nnn #1#2#3
  {
    \rand
    \int_set:Nn #1 { #2 + \int_mod:nn {\c@lcg@rand} { #3 + 1 - (#2) } }
  }
%    \end{macrocode}
% We also need floating point random numbers.
%    \begin{macrocode}
\cs_new_nopar:Npn \@@_set_to_random_fp:Nnn
  { \@@_set_to_random_fp_aux:NNnn \fp_set:Nn }
\cs_new_nopar:Npn \@@_add_to_random_fp:Nnn
  { \@@_set_to_random_fp_aux:NNnn \fp_add:Nn }
\cs_new:Npn \@@_set_to_random_fp_aux:NNnn #1#2#3#4
  {
    \rand
    #1 #2 { #3 + (#4 - (#3)) * \c@lcg@rand / \c_@@_lcg_last_int }
  }
%    \end{macrocode}
%
% We can now pick an element at random from a comma-separated list
%    \begin{macrocode}
\cs_new:Npn \@@_set_to_random_clist_element:NN #1#2
  {
    \@@_set_to_random_int:Nnn \l_@@_tmpb_int {1} { \clist_length:N #2 }
    \fp_set:Nn #1 { \clist_item:Nn #2 { \l_@@_tmpb_int } }
  }
\cs_new:Npn \@@_add_to_random_clist_element:NN #1#2
  {
    \@@_set_to_random_int:Nnn \l_@@_tmpb_int {1} { \clist_length:N #2 }
    \fp_add:Nn #1 { \clist_item:Nn #2 { \l_@@_tmpb_int } }
  }
%    \end{macrocode}
%
% \subsection{Other comma list operations}
%
% More stuff on clists.
%
%    \begin{macrocode}
\cs_new:Npn \@@_radians_from_degrees:N #1
  {
    \clist_clear:N \l_@@_tmpa_clist
    \clist_map_inline:Nn #1
      { \clist_push:Nx \l_@@_tmpa_clist { \fp_eval:n { ##1 deg } } }
    \clist_set_eq:NN #1 \l_@@_tmpa_clist
  }
\cs_new:Npn \@@_clist_fp_from_dim:N #1
  {
    \clist_clear:N \l_@@_tmpa_clist
    \clist_map_inline:Nn #1
      { \clist_push:Nx \l_@@_tmpa_clist { \dim_to_fp:n {##1} } }
    \clist_set_eq:NN #1 \l_@@_tmpa_clist
  }
%    \end{macrocode}
%
% \subsection{Variables}
%
% We need a bunch of floating point numbers: each step line goes from
% the |_old| point to the |_new| point.
%    \begin{macrocode}
\fp_new:N \l_@@_old_x_fp
\fp_new:N \l_@@_old_y_fp
\fp_new:N \l_@@_new_x_fp
\fp_new:N \l_@@_new_y_fp
\fp_new:N \l_@@_angle_fp
\fp_new:N \l_@@_step_length_fp
\fp_new:N \l_@@_radius_fp
\int_new:N \l_@@_step_number_int
\clist_new:N \l_@@_angles_clist
\clist_new:N \l_@@_lengths_clist
\fp_new:N \l_@@_tmpa_fp
\fp_new:N \l_@@_tmpb_fp
\clist_new:N \l_@@_tmpa_clist
\int_new:N \l_@@_tmpb_int
%    \end{macrocode}
%</package>
%
% \end{implementation}
%
% \endinput
